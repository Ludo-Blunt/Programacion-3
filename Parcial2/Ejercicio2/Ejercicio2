import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

public class ExamenColaMapa {

    static class ColaCircularEnteros {
        private int[] datos;
        private int cabeza;
        private int cola;
        private int tam;

        public ColaCircularEnteros(int capacidad) {
            if (capacidad <= 0) capacidad = 1;           // si la capacidad es inválida, la ajusto a 1
            datos = new int[capacidad];                 // creo el arreglo de la cola con esa capacidad
            cabeza = 0;                                 // inicio la cabeza en 0
            cola = 0;                                   // inicio la cola en 0
            tam = 0;                                    // inicio el tamaño en 0
        }

        public boolean estaVacia() {
            return tam == 0;                            // la cola está vacía si el tamaño es 0
        }

        public boolean estaLlena() {
            return tam == datos.length;                 // la cola está llena si el tamaño llegó a su máximo
        }

        public void encolar(int x) {
            if (estaLlena())                            // si la cola está llena...
                throw new IllegalStateException("Cola llena"); 
            datos[cola] = x;                            // guardo el valor en la posición de cola
            cola = (cola + 1) % datos.length;           // muevo la cola a la siguiente posición circular
            tam++;                                      // incremento el tamaño de la cola
        }

        public int desencolar() {
            if (estaVacia())                            // si la cola está vacía no se puede sacar nada
                throw new IllegalStateException("Cola vacia");
            int v = datos[cabeza];                      // guardo el valor en la posición de cabeza
            cabeza = (cabeza + 1) % datos.length;       // muevo la cabeza a la siguiente posición circular
            tam--;                                      // reduzco el tamaño porque saqué un elemento
            return v;                                   // retorno el valor que desencolé
        }
    }

    // (50 pts) Calcula el balance de paréntesis encolando +1 y -1.
    public static int balanceConCola(String s) {
        ColaCircularEnteros cola = new ColaCircularEnteros(s.length()); // creo la cola con capacidad igual a la longitud de la cadena
        for (int i = 0; i < s.length(); i++) {                          // recorro cada caracter de la cadena
            char c = s.charAt(i);                                       // obtengo el caracter actual
            if (c == '(') {                                             // si es paréntesis de apertura
                cola.encolar(1);                                        // encolo un +1
            } else if (c == ')') {                                      // si es paréntesis de cierre
                cola.encolar(-1);                                       // encolo un -1
            }
        }
        int suma = 0;                                                   // inicializo la suma total
        while (!cola.estaVacia()) {                                     // mientras la cola no esté vacía
            suma += cola.desencolar();                                  // saco y sumo cada valor
        }
        return suma;                                                    // retorno la suma final del balance
    }

    // (50 pts) Registra intentos por nombre en un mapa.
    public static int registrarIntento(Map<String,Integer> intentos, String nombre) {
        if (intentos.containsKey(nombre)) {             // si el nombre ya existe en el mapa
            int valor = intentos.get(nombre);           // obtengo el valor actual
            valor++;                                    // incremento el contador
            intentos.put(nombre, valor);                // actualizo el mapa con el nuevo valor
        } else {
            intentos.put(nombre, 1);                    // si no existe, lo inicio en 1
        }
        return 0;                                       // retorno 0 como en el código original
    }

